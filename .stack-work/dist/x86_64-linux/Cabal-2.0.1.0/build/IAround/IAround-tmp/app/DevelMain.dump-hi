
==================== FINAL INTERFACE ====================
2018-06-11 17:28:22.951968 UTC

interface main:DevelMain 8022
  interface hash: dd9c078ae5b59a2742dd2149227979d4
  ABI hash: 136ada9c316b51dc3b96c0ecd7e82eeb
  export-list hash: a0f9256db3333cf88990a6aecba48119
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 397788dbc29114cb3caca16f2239ddcc
  sig of: Nothing
  used TH splices: False
  where
exports:
  DevelMain.modifyStoredIORef
  DevelMain.shutdown
  DevelMain.tidStoreNum
  DevelMain.update
module dependencies:
package dependencies: IAround-0.0.0 StateVar-1.1.1.0
                      adjunctions-4.4 aeson-1.2.4.0 aeson-compat-0.3.7.1
                      ansi-terminal-0.8.0.4 appar-0.1.4 array-0.5.2.0 asn1-encoding-0.9.5
                      asn1-parse-0.9.4 asn1-types-0.3.2 async-2.1.1.1 attoparsec-0.13.2.2
                      attoparsec-iso8601-1.0.0.0 authenticate-1.3.4 auto-update-0.1.4
                      base-4.10.1.0 base-compat-0.9.3 base-orphans-0.7
                      base-unicode-symbols-0.2.2.4 base64-bytestring-1.0.0.1
                      basement-0.0.7 basic-prelude-0.7.0 bifunctors-5.5.2 binary-0.8.5.1
                      blaze-builder-0.4.1.0 blaze-html-0.9.0.1 blaze-markup-0.8.2.1
                      bsb-http-chunked-0.0.0.2 byteable-0.1.1 byteorder-1.0.4
                      bytestring-0.10.8.2 case-insensitive-1.2.0.11 cereal-0.5.5.0
                      chunked-data-0.3.1 cipher-aes-0.2.11 classy-prelude-1.4.0
                      classy-prelude-conduit-1.4.0 classy-prelude-yesod-1.4.0
                      clientsession-0.9.1.2 colour-2.3.4 comonad-5.0.3 conduit-1.3.0.2
                      conduit-extra-1.3.0 connection-0.2.8 containers-0.5.10.2
                      contravariant-1.4.1 cookie-0.4.4 cprng-aes-0.6.1 crypto-api-0.13.3
                      crypto-cipher-types-0.0.9 crypto-random-0.0.9 cryptonite-0.25
                      cryptonite-conduit-0.2.2 css-text-0.1.3.0 data-default-0.7.1.1
                      data-default-class-0.1.2.0 data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 deepseq-1.4.3.0
                      deepseq-generics-0.2.0.0 directory-1.3.0.2 distributive-0.5.3
                      dlist-0.8.0.4 dlist-instances-0.1.1.1 easy-file-0.2.2
                      email-validate-2.3.2.5 entropy-0.3.8 exceptions-0.8.3
                      fast-logger-2.4.11 file-embed-0.0.10.1 filepath-1.4.1.2
                      foreign-store-0.2 free-5.0.2 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.7.0 haskell-src-exts-1.20.2 haskell-src-meta-0.8.0.2
                      hjsmin-0.2.0.2 hourglass-0.2.11 http-api-data-0.3.7.2
                      http-client-0.5.12.1 http-client-tls-0.3.5.3 http-conduit-2.3.1
                      http-date-0.0.7 http-types-0.12.1 http2-1.6.3 integer-gmp-1.0.1.0
                      integer-logarithms-1.0.2.1 iproute-1.7.5 kan-extensions-5.1
                      keys-3.12 language-javascript-0.6.0.11 lifted-base-0.2.3.12
                      memory-0.14.16 mime-types-0.1.0.7 monad-control-1.0.2.3
                      monad-logger-0.3.28.5 monad-loops-0.4.3 mono-traversable-1.0.8.1
                      mono-traversable-instances-0.1.0.0 mtl-2.2.2
                      mutable-containers-0.3.4 network-2.6.3.5 network-uri-2.6.1.0
                      old-locale-1.0.0.7 old-time-1.1.0.3 parsec-3.1.13.0
                      path-pieces-0.2.1 pem-0.2.4 persistent-2.8.2
                      persistent-postgresql-2.8.2.0 persistent-template-2.5.4
                      pointed-5.0.1 postgresql-libpq-0.9.4.1 postgresql-simple-0.5.3.0
                      pretty-1.1.3.3 primitive-0.6.3.0 process-1.6.1.0 profunctors-5.2.2
                      psqueues-0.2.7.0 random-1.1 resource-pool-0.2.3.2 resourcet-1.2.1
                      safe-0.3.17 say-0.1.0.0 scientific-0.3.6.2 securemem-0.1.10
                      semigroupoids-5.2.2 shakespeare-2.0.15 silently-1.2.5
                      simple-sendfile-0.2.27 skein-1.0.9.4 socks-0.5.6 split-0.2.3.3
                      stm-2.4.5.0 stm-chans-3.0.0.4 streaming-commons-0.1.19
                      stringsearch-0.3.6.6 tagged-0.8.5 tagsoup-0.14.6
                      tagstream-conduit-0.5.5.3 template-haskell-2.12.0.0 text-1.2.3.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 tls-1.4.1
                      transformers-0.5.2.0 transformers-base-0.4.4
                      transformers-compat-0.5.1.4 unix-2.7.2.2 unix-compat-0.5.0.1
                      unix-time-0.3.8 unliftio-0.2.7.0 unliftio-core-0.1.1.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vault-0.3.1.0 vector-0.12.0.1 vector-algorithms-0.7.0.1
                      vector-instances-3.4 wai-3.2.1.2 wai-app-static-3.1.6.2
                      wai-cors-0.2.6 wai-extra-3.0.22.0 wai-logger-2.3.2 warp-3.2.22
                      word8-0.1.3 x509-1.7.3 x509-store-1.6.6 x509-system-1.6.6
                      x509-validation-1.6.10 xml-conduit-1.8.0 xml-types-0.3.6
                      xss-sanitize-0.3.5.7 yaml-0.8.30 yesod-1.6.0 yesod-auth-1.6.3
                      yesod-core-1.6.5 yesod-form-1.6.1 yesod-newsfeed-1.6.1.0
                      yesod-persistent-1.6.0 yesod-static-1.6.0 zlib-0.6.2
orphans: IAround-0.0.0:Application
         mono-traversable-instances-0.1.0.0:Data.MonoTraversable.Instances
         vector-instances-3.4:Data.Vector.Instances
         base-orphans-0.7:Data.Orphans
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         yesod-auth-1.6.3:Yesod.Auth
         http-client-0.5.12.1:Network.HTTP.Client.Request
         persistent-template-2.5.4:Database.Persist.TH
         colour-2.3.4:Data.Colour crypto-api-0.13.3:Crypto.Classes
         basement-0.0.7:Basement.UArray.Base basement-0.0.7:Basement.Block
         haskell-src-exts-1.20.2:Language.Haskell.Exts.Parser
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistQuery
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistUnique
         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
         unix-time-0.3.8:Data.UnixTime.Diff
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         stm-2.4.5.0:Control.Monad.STM network-2.6.3.5:Network.Socket
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         transformers-0.5.2.0:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: IAround-0.0.0:Foundation
                         IAround-0.0.0:Model adjunctions-4.4:Data.Functor.Rep
                         aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats basement-0.0.7:Basement.Block.Base
                         basement-0.0.7:Basement.Monad
                         basement-0.0.7:Basement.MutableBuilder basement-0.0.7:Basement.Nat
                         basement-0.0.7:Basement.NonEmpty
                         basement-0.0.7:Basement.Numerical.Subtractive
                         basement-0.0.7:Basement.PrimType basement-0.0.7:Basement.String
                         basement-0.0.7:Basement.String.Encoding.ASCII7
                         basement-0.0.7:Basement.String.Encoding.ISO_8859_1
                         basement-0.0.7:Basement.String.Encoding.UTF16
                         basement-0.0.7:Basement.String.Encoding.UTF32
                         basement-0.0.7:Basement.Types.OffsetSize
                         basement-0.0.7:Basement.UArray.Base
                         basement-0.0.7:Basement.UTF8.Base
                         bifunctors-5.5.2:Data.Bifunctor.Biff
                         bifunctors-5.5.2:Data.Bifunctor.Clown
                         bifunctors-5.5.2:Data.Bifunctor.Flip
                         bifunctors-5.5.2:Data.Bifunctor.Join
                         bifunctors-5.5.2:Data.Bifunctor.Joker
                         bifunctors-5.5.2:Data.Bifunctor.Product
                         bifunctors-5.5.2:Data.Bifunctor.Sum
                         bifunctors-5.5.2:Data.Bifunctor.Tannen
                         bifunctors-5.5.2:Data.Bifunctor.Wrapped
                         conduit-1.3.0.2:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.2:Data.Conduit.Internal.Pipe
                         containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         cryptonite-0.25:Crypto.ECC cryptonite-0.25:Crypto.Error.Types
                         cryptonite-0.25:Crypto.Hash.Blake2
                         cryptonite-0.25:Crypto.Hash.Blake2b
                         cryptonite-0.25:Crypto.Hash.Blake2bp
                         cryptonite-0.25:Crypto.Hash.Blake2s
                         cryptonite-0.25:Crypto.Hash.Blake2sp
                         cryptonite-0.25:Crypto.Hash.Keccak cryptonite-0.25:Crypto.Hash.MD2
                         cryptonite-0.25:Crypto.Hash.MD4 cryptonite-0.25:Crypto.Hash.MD5
                         cryptonite-0.25:Crypto.Hash.RIPEMD160
                         cryptonite-0.25:Crypto.Hash.SHA1 cryptonite-0.25:Crypto.Hash.SHA224
                         cryptonite-0.25:Crypto.Hash.SHA256 cryptonite-0.25:Crypto.Hash.SHA3
                         cryptonite-0.25:Crypto.Hash.SHA384
                         cryptonite-0.25:Crypto.Hash.SHA512
                         cryptonite-0.25:Crypto.Hash.SHA512t
                         cryptonite-0.25:Crypto.Hash.SHAKE
                         cryptonite-0.25:Crypto.Hash.Skein256
                         cryptonite-0.25:Crypto.Hash.Skein512
                         cryptonite-0.25:Crypto.Hash.Tiger
                         cryptonite-0.25:Crypto.Hash.Whirlpool dlist-0.8.0.4:Data.DList
                         email-validate-2.3.2.5:Text.Email.Parser
                         free-5.0.2:Control.Comonad.Cofree free-5.0.2:Control.Monad.Free
                         free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         haskell-src-exts-1.20.2:Language.Haskell.Exts.SrcLoc
                         haskell-src-exts-1.20.2:Language.Haskell.Exts.Syntax
                         http-client-0.5.12.1:Network.HTTP.Client iproute-1.7.5:Data.IP.Addr
                         iproute-1.7.5:Data.IP.Range kan-extensions-5.1:Data.Functor.Day
                         keys-3.12:Data.Key
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         mono-traversable-1.0.8.1:Data.Containers
                         mono-traversable-1.0.8.1:Data.MonoTraversable
                         mono-traversable-1.0.8.1:Data.NonNull
                         mono-traversable-1.0.8.1:Data.Sequences
                         mono-traversable-instances-0.1.0.0:Data.MonoTraversable.Instances
                         mutable-containers-0.3.4:Data.Mutable.BRef
                         mutable-containers-0.3.4:Data.Mutable.Class
                         mutable-containers-0.3.4:Data.Mutable.DLList
                         mutable-containers-0.3.4:Data.Mutable.Deque
                         mutable-containers-0.3.4:Data.Mutable.PRef
                         mutable-containers-0.3.4:Data.Mutable.SRef
                         mutable-containers-0.3.4:Data.Mutable.URef
                         network-uri-2.6.1.0:Network.URI
                         persistent-2.8.2:Database.Persist.Class.PersistConfig
                         persistent-2.8.2:Database.Persist.Class.PersistEntity
                         persistent-2.8.2:Database.Persist.Sql.Orphan.PersistStore
                         persistent-2.8.2:Database.Persist.Sql.Types.Internal
                         persistent-postgresql-2.8.2.0:Database.Persist.Postgresql
                         pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         shakespeare-2.0.15:Text.Internal.Css
                         shakespeare-2.0.15:Text.Shakespeare tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         vector-instances-3.4:Data.Vector.Instances
                         xml-types-0.3.6:Data.XML.Types yesod-auth-1.6.3:Yesod.Auth
                         yesod-auth-1.6.3:Yesod.Auth.Routes
                         yesod-core-1.6.5:Yesod.Core.Class.Handler
                         yesod-core-1.6.5:Yesod.Core.Internal.LiteApp
                         yesod-core-1.6.5:Yesod.Core.Types yesod-static-1.6.0:Yesod.Static
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  IAround-0.0.0:Application c730a81ee8eda71975f240e33b32c1a9
import  -/  base-4.10.1.0:Control.Concurrent 54b4f33006223552c60861a4a302d698
import  -/  base-4.10.1.0:Control.Monad ebed2e8e7444944e0c1d827c6faf40a4
import  -/  base-4.10.1.0:Data.IORef 27e590a10ae158b4075a28a9902178b2
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Conc.Sync 3cf9d980bef04043684377f638021935
import  -/  base-4.10.1.0:GHC.IORef fcf9a9efa120217c33e71b5dc4a08e1f
import  -/  base-4.10.1.0:GHC.MVar b1970e54b4c552d660c9a97d807961dc
import  -/  base-4.10.1.0:GHC.Word c6a98ee069a5b8600d1939e40e62ef27
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  base-4.10.1.0:System.IO 6e5bb580370d8d71dc5888f723cea4b4
import  -/  foreign-store-0.2:Foreign.Store c099504fde4c83a15c7067376fe0b3e2
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  warp-3.2.22:Network.Wai.Handler.Warp ecf4778d662cbbc739afe05602e1522b
import  -/  warp-3.2.22:Network.Wai.Handler.Warp.Run 0cfd3798d85fe82940d41e4913c67035
import  -/  warp-3.2.22:Network.Wai.Handler.Warp.Settings 7de06a6e61c34517453b9af232c1ce77
6fe7cd4efed25fc0562b38474a354fdb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   DevelMain.$trModule3
                   DevelMain.$trModule1) -}
5ba8a5c8feddd250c6878c4b7edafb50
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DevelMain.$trModule2) -}
1e94b0de26bd777d2c9db0334a3e2fa7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DevelMain"#) -}
1120793141b4856261984c3785449596
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS DevelMain.$trModule4) -}
396f10591baea19dfc50e6c761f42792
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
2de4c5b0c17c9c0900ae9364caec9242
  $wmodifyStoredIORef ::
    GHC.Prim.Word#
    -> (a -> GHC.Types.IO a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S,U><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.Word#)
                   (w :: a -> GHC.Types.IO a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                        GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.StablePtr# a #)}
                        @ (GHC.IORef.IORef a)
                        ww
                        w1 of wild { (#,#) ds2 ds3 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqAddr#
                           ds3
                             `cast`
                           (UnsafeCo representational (GHC.Prim.StablePtr#
                                                         (GHC.IORef.IORef a)) GHC.Prim.Addr#)
                           __NULL) of wild1 {
                   GHC.Types.False
                   -> case GHC.Prim.deRefStablePtr#
                             @ (GHC.IORef.IORef a)
                             ds3
                             ds2 of ds4 { (#,#) ipv ipv1 ->
                      case ipv1
                             `cast`
                           (Nth:2
                                (Trans
                                     (<GHC.IORef.IORef a>_R ->_R GHC.Types.N:IO[0] <a>_R)
                                     (GHC.IORef.N:IORef[0] <a>_N
                                      ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                            -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  a #)>_R))) of wild2 { GHC.STRef.STRef var# ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ a
                             var#
                             ipv of ds1 { (#,#) ipv2 ipv3 ->
                      case (w ipv3) `cast` (GHC.Types.N:IO[0] <a>_R)
                             ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ a
                             var#
                             ipv5
                             ipv4 of s2# { DEFAULT ->
                      (# s2#, GHC.Tuple.() #) } } } } }
                   GHC.Types.True
                   -> case Foreign.Store.readStore2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {} } }) -}
b3ab70c92a292b9a6f5ea4a49b9781f1
  modifyStoredIORef ::
    Foreign.Store.Store (GHC.IORef.IORef a)
    -> (a -> GHC.Types.IO a) -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*C1(C1(U(U,U)))><S,U>,
     Unfolding: InlineRule (0, True, True)
                DevelMain.modifyStoredIORef1
                  `cast`
                (forall (a :: <*>_N).
                 <Foreign.Store.Store (GHC.IORef.IORef a)>_R
                 ->_R <a -> GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ba6aab8e0b02edcc269c339ac2e8d1f4
  modifyStoredIORef1 ::
    Foreign.Store.Store (GHC.IORef.IORef a)
    -> (a -> GHC.Types.IO a)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Foreign.Store.Store (GHC.IORef.IORef a))
                   (w1 :: a -> GHC.Types.IO a)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w `cast`
                      (Foreign.Store.N:Store[0]
                           <GHC.IORef.IORef a>_P) of ww { GHC.Word.W32# ww1 ->
                 DevelMain.$wmodifyStoredIORef @ a ww1 w1 w2 }) -}
222faabfb57fa1f41cd75f46ec9b8032
  shutdown :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                DevelMain.shutdown1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
233f80e87ff86d415c0d1a85ad0078b6
  shutdown1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC foreign-store-0.2 GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Word# #)}
                        1##
                        s of wild { (#,#) ds2 ds3 ->
                 case GHC.Prim.narrow32Word# ds3 of wild1 {
                   DEFAULT -> DevelMain.shutdown3 ds2 DevelMain.shutdown2
                   0##
                   -> DevelMain.shutdown3
                        ds2
                        (GHC.Base.Nothing
                           @ (Foreign.Store.Store
                                (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))) } }) -}
5faf3d60a99b0d10d36d1becbe9c6d51
  shutdown2 ::
    GHC.Base.Maybe
      (Foreign.Store.Store (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (Foreign.Store.Store (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))
                   DevelMain.tidStoreNum
                     `cast`
                   (Sym (Foreign.Store.N:Store[0]
                             <GHC.IORef.IORef GHC.Conc.Sync.ThreadId>_P))) -}
a6240a98625d876c20b15f968d073216
  shutdown3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Base.Maybe
         (Foreign.Store.Store (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: GHC.Base.Maybe
                              (Foreign.Store.Store
                                 (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)))[OneShot] ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        DevelMain.shutdown6
                        GHC.Types.True
                        ipv
                   GHC.Base.Just tidStore
                   -> case tidStore
                             `cast`
                           (Foreign.Store.N:Store[0]
                                <GHC.IORef.IORef
                                   GHC.Conc.Sync.ThreadId>_P) of ds { GHC.Word.W32# ds1 ->
                      case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                             GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.StablePtr# a #)}
                             @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                             ds1
                             ipv of wild1 { (#,#) ds2 ds3 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr#
                                ds3
                                  `cast`
                                (UnsafeCo representational (GHC.Prim.StablePtr#
                                                              (GHC.IORef.IORef
                                                                 GHC.Conc.Sync.ThreadId)) GHC.Prim.Addr#)
                                __NULL) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.deRefStablePtr#
                                  @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                                  ds3
                                  ds2 of ds4 { (#,#) ipv2 ipv3 ->
                           case ipv3
                                  `cast`
                                (Nth:2
                                     (Trans
                                          (<GHC.IORef.IORef GHC.Conc.Sync.ThreadId>_R
                                           ->_R GHC.Types.N:IO[0] <GHC.Conc.Sync.ThreadId>_R)
                                          (GHC.IORef.N:IORef[0] <GHC.Conc.Sync.ThreadId>_N
                                           ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Conc.Sync.ThreadId #)>_R))) of wild3 { GHC.STRef.STRef var# ->
                           case GHC.Prim.readMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ GHC.Conc.Sync.ThreadId
                                  var#
                                  ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                           case ipv5 of wild4 { GHC.Conc.Sync.ThreadId tid1 ->
                           case GHC.Prim.killThread#
                                  @ GHC.Exception.SomeException
                                  tid1
                                  GHC.Conc.Sync.killThread2
                                  ipv4 of s1 { DEFAULT ->
                           GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             DevelMain.shutdown4
                             GHC.Types.True
                             s1 } } } } }
                        GHC.Types.True
                        -> case Foreign.Store.readStore2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } } }) -}
9a6393f7721d3b059f1ecee7abc08134
  shutdown4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# DevelMain.shutdown5) -}
e190fe728f3d328fd79cefaa6c81c2e0
  shutdown5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Yesod app is shutdown"#) -}
7e17dc1a1ae2d1d1d964bfa97ecbb605
  shutdown6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# DevelMain.shutdown7) -}
4f8117559d66d51fac379a7d26205bee
  shutdown7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("no Yesod app running"#) -}
45d45b231cc29863ba16e0c0a2ae003c
  tidStoreNum :: GHC.Word.Word32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Word.W32# 1##) -}
95c7e11a82725b5ad689612e30e5666a
  update :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                DevelMain.update1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5dada01b387a86b40c7c58f11e98baf4
  update1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC foreign-store-0.2 GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Word# #)}
                        1##
                        s of wild { (#,#) ds2 ds3 ->
                 case GHC.Prim.narrow32Word# ds3 of wild1 {
                   DEFAULT -> DevelMain.update2 ds2 DevelMain.shutdown2
                   0##
                   -> DevelMain.update2
                        ds2
                        (GHC.Base.Nothing
                           @ (Foreign.Store.Store
                                (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))) } }) -}
4917479f9b0557be76585d6bdad55136
  update2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Base.Maybe
         (Foreign.Store.Store (GHC.IORef.IORef GHC.Conc.Sync.ThreadId))
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (ipv :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                   (ipv1 :: GHC.Base.Maybe
                              (Foreign.Store.Store
                                 (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)))[OneShot] ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Prim.newMVar#
                             @ GHC.Prim.RealWorld
                             @ ()
                             ipv of ds { (#,#) ipv2 ipv3 ->
                      case Foreign.Store.$wwriteStore
                             @ (GHC.MVar.MVar ())
                             0##
                             (GHC.MVar.MVar @ () ipv3)
                             ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                      case Application.getApplicationRepl1
                             ipv4 of ds1 { (#,#) ipv6 ipv7 ->
                      case ipv7 of wild1 { (,,) port site app ->
                      case Control.Concurrent.forkFinally1
                             @ ()
                             (Network.Wai.Handler.Warp.Run.run2
                                (Network.Wai.Handler.Warp.Settings.Settings
                                   port
                                   Network.Wai.Handler.Warp.Settings.defaultSettings16
                                   Network.Wai.Handler.Warp.Settings.defaultOnException1
                                     `cast`
                                   (<GHC.Base.Maybe Network.Wai.Internal.Request>_R
                                    ->_R <GHC.Exception.SomeException>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                   Network.Wai.Handler.Warp.Settings.defaultOnExceptionResponse
                                   Network.Wai.Handler.Warp.Settings.defaultSettings15
                                     `cast`
                                   (<Network.Socket.Types.SockAddr>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                                   Network.Wai.Handler.Warp.Settings.defaultSettings14
                                     `cast`
                                   (<Network.Socket.Types.SockAddr>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                   Network.Wai.Handler.Warp.Settings.defaultSettings13
                                   (GHC.Base.Nothing @ Network.Wai.Handler.Warp.Timeout.Manager)
                                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                                   Network.Wai.Handler.Warp.Settings.defaultSettings12
                                   Network.Wai.Handler.Warp.Settings.defaultSettings11
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0] <()>_R))
                                   Network.Wai.Handler.Warp.Settings.defaultSettings10
                                     `cast`
                                   (<(forall a. GHC.Types.IO a -> GHC.Types.IO a)
                                     -> GHC.Types.IO ()>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                   GHC.Types.False
                                   Network.Wai.Handler.Warp.Settings.defaultSettings9
                                     `cast`
                                   (<GHC.Types.IO ()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                   Network.Wai.Handler.Warp.Settings.defaultSettings6
                                   Network.Wai.Handler.Warp.Settings.defaultSettings4
                                   Network.Wai.Handler.Warp.Settings.ProxyProtocolNone
                                   Network.Wai.Handler.Warp.Settings.defaultSettings3
                                   GHC.Types.True
                                   Network.Wai.Handler.Warp.Settings.defaultSettings2
                                     `cast`
                                   (<Network.Wai.Internal.Request>_R
                                    ->_R <Network.HTTP.Types.Status.Status>_R
                                    ->_R <GHC.Base.Maybe GHC.Integer.Type.Integer>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                   Network.Wai.Handler.Warp.Settings.defaultSettings1
                                     `cast`
                                   (<Network.Wai.Internal.Request>_R
                                    ->_R <Data.ByteString.Internal.ByteString>_R
                                    ->_R <GHC.Integer.Type.Integer>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                   (GHC.Base.Nothing @ GHC.Types.Int))
                                app)
                               `cast`
                             (Sym (GHC.Types.N:IO[0] <()>_R))
                             (\ (ds4 :: Data.Either.Either GHC.Exception.SomeException ())
                                (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.putMVar#
                                     @ GHC.Prim.RealWorld
                                     @ ()
                                     ipv3
                                     GHC.Tuple.()
                                     s of s2# { DEFAULT ->
                              (# s2#, GHC.Tuple.() #) })
                               `cast`
                             (<Data.Either.Either GHC.Exception.SomeException ()>_R
                              ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                             ipv6 of ds4 { (#,#) ipv8 ipv9 ->
                      case GHC.Prim.newMutVar#
                             @ GHC.Conc.Sync.ThreadId
                             @ GHC.Prim.RealWorld
                             ipv9
                             ipv8 of ds5 { (#,#) ipv10 ipv11 ->
                      case Foreign.Store.$wwriteStore
                             @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                             1##
                             (GHC.STRef.STRef
                                @ GHC.Prim.RealWorld
                                @ GHC.Conc.Sync.ThreadId
                                ipv11)
                               `cast`
                             (Sym (GHC.IORef.N:IORef[0]) <GHC.Conc.Sync.ThreadId>_N)
                             ipv10 of ds6 { (#,#) ipv12 ipv13 ->
                      (# ipv12, GHC.Tuple.() #) } } } } } } }
                   GHC.Base.Just tidStore
                   -> case tidStore
                             `cast`
                           (Foreign.Store.N:Store[0]
                                <GHC.IORef.IORef
                                   GHC.Conc.Sync.ThreadId>_P) of ds { GHC.Word.W32# ds1 ->
                      case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                             GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.StablePtr# a #)}
                             @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                             ds1
                             ipv of wild1 { (#,#) ds2 ds3 ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqAddr#
                                ds3
                                  `cast`
                                (UnsafeCo representational (GHC.Prim.StablePtr#
                                                              (GHC.IORef.IORef
                                                                 GHC.Conc.Sync.ThreadId)) GHC.Prim.Addr#)
                                __NULL) of wild2 {
                        GHC.Types.False
                        -> case GHC.Prim.deRefStablePtr#
                                  @ (GHC.IORef.IORef GHC.Conc.Sync.ThreadId)
                                  ds3
                                  ds2 of ds4 { (#,#) ipv2 ipv3 ->
                           case ipv3
                                  `cast`
                                (Nth:2
                                     (Trans
                                          (<GHC.IORef.IORef GHC.Conc.Sync.ThreadId>_R
                                           ->_R GHC.Types.N:IO[0] <GHC.Conc.Sync.ThreadId>_R)
                                          (GHC.IORef.N:IORef[0] <GHC.Conc.Sync.ThreadId>_N
                                           ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Conc.Sync.ThreadId #)>_R))) of wild3 { GHC.STRef.STRef var# ->
                           case GHC.Prim.readMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ GHC.Conc.Sync.ThreadId
                                  var#
                                  ipv2 of ds7 { (#,#) ipv4 ipv5 ->
                           case ipv5 of wild4 { GHC.Conc.Sync.ThreadId tid1 ->
                           case GHC.Prim.killThread#
                                  @ GHC.Exception.SomeException
                                  tid1
                                  GHC.Conc.Sync.killThread2
                                  ipv4 of s1 { DEFAULT ->
                           case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                                  GHC.Prim.Word#
                                                                  -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Prim.StablePtr# a #)}
                                  @ (GHC.MVar.MVar ())
                                  0##
                                  s1 of wild5 { (#,#) ds8 ds9 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.eqAddr#
                                     ds9
                                       `cast`
                                     (UnsafeCo representational (GHC.Prim.StablePtr#
                                                                   (GHC.MVar.MVar
                                                                      ())) GHC.Prim.Addr#)
                                     __NULL) of wild6 {
                             GHC.Types.False
                             -> case GHC.Prim.deRefStablePtr#
                                       @ (GHC.MVar.MVar ())
                                       ds9
                                       ds8 of ds10 { (#,#) ipv6 ipv7 ->
                                case ipv7 of wild7 { GHC.MVar.MVar mvar# ->
                                case GHC.Prim.takeMVar#
                                       @ GHC.Prim.RealWorld
                                       @ ()
                                       mvar#
                                       ipv6 of ds11 { (#,#) ipv8 ipv9 ->
                                case {__pkg_ccall_GC foreign-store-0.2 forall a.
                                                                       GHC.Prim.Word#
                                                                       -> GHC.Prim.State#
                                                                            GHC.Prim.RealWorld
                                                                       -> (# GHC.Prim.State#
                                                                               GHC.Prim.RealWorld,
                                                                             GHC.Prim.StablePtr#
                                                                               a #)}
                                       @ (GHC.MVar.MVar ())
                                       0##
                                       ipv8 of wild8 { (#,#) ds12 ds13 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.eqAddr#
                                          ds13
                                            `cast`
                                          (UnsafeCo representational (GHC.Prim.StablePtr#
                                                                        (GHC.MVar.MVar
                                                                           ())) GHC.Prim.Addr#)
                                          __NULL) of wild9 {
                                  GHC.Types.False
                                  -> case GHC.Prim.deRefStablePtr#
                                            @ (GHC.MVar.MVar ())
                                            ds13
                                            ds12 of ds14 { (#,#) ipv10 ipv11 ->
                                     case Application.getApplicationRepl1
                                            ipv10 of ds15 { (#,#) ipv12 ipv13 ->
                                     case ipv13 of wild10 { (,,) port site app ->
                                     case Control.Concurrent.forkFinally1
                                            @ ()
                                            (Network.Wai.Handler.Warp.Run.run2
                                               (Network.Wai.Handler.Warp.Settings.Settings
                                                  port
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings16
                                                  Network.Wai.Handler.Warp.Settings.defaultOnException1
                                                    `cast`
                                                  (<GHC.Base.Maybe Network.Wai.Internal.Request>_R
                                                   ->_R <GHC.Exception.SomeException>_R
                                                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                                  Network.Wai.Handler.Warp.Settings.defaultOnExceptionResponse
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings15
                                                    `cast`
                                                  (<Network.Socket.Types.SockAddr>_R
                                                   ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings14
                                                    `cast`
                                                  (<Network.Socket.Types.SockAddr>_R
                                                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings13
                                                  (GHC.Base.Nothing
                                                     @ Network.Wai.Handler.Warp.Timeout.Manager)
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings12
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings12
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings11
                                                    `cast`
                                                  (Sym (GHC.Types.N:IO[0] <()>_R))
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings10
                                                    `cast`
                                                  (<(forall a. GHC.Types.IO a -> GHC.Types.IO a)
                                                    -> GHC.Types.IO ()>_R
                                                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                                  GHC.Types.False
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings9
                                                    `cast`
                                                  (<GHC.Types.IO ()>_R
                                                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings6
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings4
                                                  Network.Wai.Handler.Warp.Settings.ProxyProtocolNone
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings3
                                                  GHC.Types.True
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings2
                                                    `cast`
                                                  (<Network.Wai.Internal.Request>_R
                                                   ->_R <Network.HTTP.Types.Status.Status>_R
                                                   ->_R <GHC.Base.Maybe GHC.Integer.Type.Integer>_R
                                                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                                  Network.Wai.Handler.Warp.Settings.defaultSettings1
                                                    `cast`
                                                  (<Network.Wai.Internal.Request>_R
                                                   ->_R <Data.ByteString.Internal.ByteString>_R
                                                   ->_R <GHC.Integer.Type.Integer>_R
                                                   ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                                  (GHC.Base.Nothing @ GHC.Types.Int))
                                               app)
                                              `cast`
                                            (Sym (GHC.Types.N:IO[0] <()>_R))
                                            (\ (ds16 :: Data.Either.Either
                                                          GHC.Exception.SomeException ())
                                               (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                             case ipv11 of wild11 { GHC.MVar.MVar mvar#1 ->
                                             case GHC.Prim.putMVar#
                                                    @ GHC.Prim.RealWorld
                                                    @ ()
                                                    mvar#1
                                                    GHC.Tuple.()
                                                    s of s2# { DEFAULT ->
                                             (# s2#, GHC.Tuple.() #) } })
                                              `cast`
                                            (<Data.Either.Either GHC.Exception.SomeException ()>_R
                                             ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                                            ipv12 of ds16 { (#,#) ipv14 ipv15 ->
                                     case GHC.Prim.writeMutVar#
                                            @ GHC.Prim.RealWorld
                                            @ GHC.Conc.Sync.ThreadId
                                            var#
                                            ipv15
                                            ipv14 of s2# { DEFAULT ->
                                     (# s2#, GHC.Tuple.() #) } } } } }
                                  GHC.Types.True
                                  -> case Foreign.Store.readStore2
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {} } } } } }
                             GHC.Types.True
                             -> case Foreign.Store.readStore2
                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                of {} } } } } } } }
                        GHC.Types.True
                        -> case Foreign.Store.readStore2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

